/*
 *     Copyright (c) 2013 Battelle Memorial Institute
 *     Licensed under modified BSD License. A copy of this license can be found
 *     in the LICENSE file in the top level directory of this distribution.
 */
/**
 * @file   PTI23_test.cpp
 * @author Kevin Glass
 * @date   2013-06-17 12:09:38 d3k427
 * 
 * @brief Currently not implemented
 * 
 * 
 */

#include <iostream>
#include <string>
#include <gridpack/parser/Parser.hpp>
#include <gridpack/parser/PTI23_parser.hpp>

#define BOOST_TEST_NO_MAIN
#define BOOST_TEST_ALTERNATIVE_INIT_API
#include <boost/test/included/unit_test.hpp>

#define EPSILON     0.0000001
#define TOLERANCE(x, y, eps) (x - EPSILON > y && x + EPSILON < y)

BOOST_AUTO_TEST_SUITE(Parser)

//____________________________________________________________________________//

void validate_case(std::vector<gridpack::component::DataCollection> & data)
{
/**
 * @file   vector_construction_test.cpp
 * @author William A. Perkins
 * @date   2013-06-17 12:09:38 d3g096
 * 
 * @brief  Construction/clone unit testing for gridpack::math::Vector
 * 
 * 
 */

#define BOOST_TEST_NO_MAIN
#define BOOST_TEST_ALTERNATIVE_INIT_API
#include <boost/test/included/unit_test.hpp>

#define EPSILON     0.0000001
#define TOLERANCE(x, y, eps) (x - EPSILON > y && x + EPSILON < y)

BOOST_AUTO_TEST_SUITE(Parser)

//____________________________________________________________________________//

void checkValue(const char * str, const char * value)
{
    char                * compareValue      = NULL;
    int                   compare           = 0;

    data.getValue(str, compareValue);
    compare = strcmp(str, compareValue);
    std::cout << str << value << compareValue<< std::endl;
    BOOST_CHECK_EQUAL(compare, 0); // values match when compare is zero
}

void checkValue(const char * str, int value)
{
    int                   compareValue      = 0;

    data.getValue(str, compareValue);
    std::cout << str << value << compareValue<< std::endl;
    BOOST_CHECK_EQUAL(value, compareValue);
}

void checkValue(const char * str, double value)
{
    double               compareValue      = 0;

    data.getValue(str, compareValue);
    std::cout << str << value << compareValue<< std::endl;
    BOOST_CHECK_EQUAL(value, compareValue);
}

void checkValue(const char * str, char value)
{
    char               compareValue      = 0;

    data.getValue(str, compareValue);
    std::cout << str << value << compareValue<< std::endl;
    BOOST_CHECK_EQUAL(value, compareValue);
}

void validate_case(std::vector<gridpack::component::DataCollection> & collection)
{
    DataCollection   data    = collection.begin();
    int              iValue      = 0;
    double           dValue      = 0.0;
    char             sValue      = "\0";

    checkValue(CASE_IC,  0);
    checkValue(CASE_SBASE,  100.000);
    checkValue(CASE_RECORD2,  "IEEE 118 bus test case");
    checkValue(CASE_RECORD3,  "IEEE 118 bus test case");
}

void validate_buses(std::vector<gridpack::component::DataCollection> & collection)
{
    int              iValue      = 0;
    double           dValue      = 0.0;
    char             sValue      = "\0";

    for (std::vector<gridpack::component::DataCollection>::iterator data = collection.begin(), int i =0 ;
            data != collection.end(); ++data, ++i) {

        checkValue(BUS_I,  0);
        checkValue(BUS_IDE,  0);
        checkValue(BUS_PL,  0);
        checkValue(BUS_QL,  0);

        checkValue(BUS_GL,  0);
        checkValue(BUS_BL,  0);
        checkValue(BUS_IA,  0);
        checkValue(BUS_VM,  0);

        checkValue(BUS_VA,  0);
        checkValue(BUS_NAME,  0);
        checkValue(BUS_BASKV,  0);
        checkValue(BUS_ZONE,  0);
    }
}


void validate_generator(std::vector<gridpack::component::DataCollection> & collection)
{
    int              iValue      = 0;
    double           dValue      = 0.0;
    char             cValue      = '\0';
    char           * sValue      = "\0";

    for (std::vector<gridpack::component::DataCollection>::iterator data = collection.begin(), int i =0 ;
            data != collection.end(); ++data, ++i) {

        checkValue(GEN_I,  0);
        checkValue(GEN_ID,  0);
        checkValue(GEN_PG,  0);
        checkValue(GEN_QG,  0);

        checkValue(GEN_QT,  0);
        checkValue(GEN_QB,  0);
        checkValue(GEN_VS,  0);
        checkValue(GEN_IREG,  0);

        checkValue(GEN_MBASE,  0);
        checkValue(GEN_ZR,  0);
        checkValue(GEN_ZX,  0);
        checkValue(GEN_RT,  0);

        checkValue(GEN_XT,  0);
        checkValue(GEN_GTAP,  0);
        checkValue(GEN_STAT,  0);
        checkValue(GEN_RMPCT,  0);

        checkValue(GEN_PT,  0);
        checkValue(GEN_PB,  0);
    }
}

void validate_branch(std::vector<gridpack::component::DataCollection> & collection)
{

    for (std::vector<gridpack::component::DataCollection>::iterator data = collection.begin(), int i =0 ;
            data != collection.end(); ++data, ++i) {

        checkValue(BRANCH_I,  0);
        checkValue(BRANCH_J,  0);
        checkValue(BRANCH_CKT,  0);
        checkValue(BRANCH_R,  0);

        checkValue(BRANCH_X,  0);
        checkValue(BRANCH_B,  0);
        checkValue(BRANCH_RATEA,  0);
        checkValue(BRANCH_RATEB,  0);

        checkValue(BRANCH_RATEC,  0);
        checkValue(BRANCH_RATIO,  0);
        checkValue(BRANCH_ANGLE,  0);
        checkValue(BRANCH_GI,  0);

        checkValue(GEN_XT,  0);
        checkValue(GEN_GTAP,  0);
        checkValue(GEN_STAT,  0);
        checkValue(GEN_RMPCT,  0);

        checkValue(BRANCH_BI,  0);
        checkValue(BRANCH_GJ,  0);
        checkValue(BRANCH_BJ,  0);
        checkValue(BRANCH_ST,  0);
    }
}

void validate_tranformer(std::vector<gridpack::component::DataCollection> & collection)
{


    for (std::vector<gridpack::component::DataCollection>::iterator data = collection.begin(), int i =0 ;
            data != collection.end(); ++data, ++i) {
        checkValue(TRANSF_I,  0);
        checkValue(TRANSF_J,  0);
        checkValue(TRANSF_CKT,  0);
        checkValue(TRANSF_VMA,  0);

        checkValue(TRANSF_VMI,  0);
        checkValue(TRANSF_STEP,  0);
        checkValue(TRANSF_TABLE,  0);
    }



}

void validate_area(std::vector<gridpack::component::DataCollection> & data)
{

    for (std::vector<gridpack::component::DataCollection>::iterator data = collection.begin(), int i =0 ;
            data != collection.end(); ++data, ++i) {

        checkValue(AREA_I,  0);
        checkValue(AREA_ISW,  0);
        checkValue(AREA_PDES,  0);
        checkValue(AREA_PTOL,  0);

        checkValue(AREA_ARNAM,  0);
    }
}

void validate_dc_line(std::vector<gridpack::component::DataCollection> & data)
{


    for (std::vector<gridpack::component::DataCollection>::iterator data = collection.begin(), int i =0 ;
            data != collection.end(); ++data, ++i) {

        checkValue(DL_I,  0);
        checkValue(DL_MDC,  0);
        checkValue(DL_RDC,  0);
        checkValue(DL_SETVL,  0);

        checkValue(DL_VSCHD,  0);
        checkValue(DL_VCMOD,  0);
        checkValue(DL_RCOMP,  0);
        checkValue(DL_DELTI,  0);

        checkValue(DL_METER,  0);
        checkValue(DL_IPR,  0);
        checkValue(DL_NBR,  0);
        checkValue(DL_ALFMAX,  0);

        checkValue(DL_ALFMN,  0);
        checkValue(DL_RCR,  0);
        checkValue(DL_XCR,  0);
        checkValue(DL_EBASR,  0);

        checkValue(DL_TRR,  0);
        checkValue(DL_TAPR,  0);
        checkValue(DL_TPMXR,  0);
        checkValue(DL_TPMNR,  0);

        checkValue(DL_TRR,  0);
        checkValue(DL_TAPR,  0);
        checkValue(DL_TPMXR,  0);
        checkValue(DL_TPMNR,  0);

        checkValue(DL_TSTPR,  0);
        checkValue(DL_IPI,  0);
        checkValue(DL_NBI,  0);
        checkValue(DL_GAMMX,  0);

        checkValue(DL_GAMMN,  0);
        checkValue(DL_RCI,  0);
        checkValue(DL_XCI,  0);
        checkValue(DL_EBASI,  0);


        checkValue(DL_TRI,  0);
        checkValue(DL_TAPI,  0);
        checkValue(DL_TPMXI,  0);
        checkValue(DL_TPMNI,  0);

        checkValue(DL_TSTPI,  0);
    }

}

void validate_shunt(std::vector<gridpack::component::DataCollection> & data)
{

    for (std::vector<gridpack::component::DataCollection>::iterator data = collection.begin(), int i =0 ;
            data != collection.end(); ++data, ++i) {

        data.getValue(SHUNT_I, &iValue);
        std::cout << "SHUNT_I               " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);

        data.getValue(SHUNT_VSWHI, &dValue);
        std::cout << "SHUNT_VSWHI           " << dValue << std::endl;
        BOOST_CHECK_EQUAL(dValue, i);

        data.getValue(SHUNT_VSWLD, &dValue);
        std::cout << "SHUNT_VSWLD           " << dValue << std::endl;
        BOOST_CHECK_EQUAL(dValue, i);

        data.getValue(SHUNT_SWREM, &dValue);
        std::cout << "SHUNT_SWREM           " << dValue << std::endl;
        BOOST_CHECK_EQUAL(dValue, i);

        data.getValue(SHUNT_VDES, &dValue);
        std::cout << "SHUNT_VDES            " << dValue << std::endl;
        BOOST_CHECK_EQUAL(dValue, i);

        data.getValue(SHUNT_BINIT, &dValue);
        std::cout << "SHUNT_BINIT           " << dValue << std::endl;
        BOOST_CHECK_EQUAL(dValue, i);

        data.getValue(SHUNT_N1, &iValue);
        std::cout << "SHUNT_N1              " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);

        data.getValue(SHUNT_B1, &dValue);
        std::cout << "SHUNT_B1              " << dValue << std::endl;
        BOOST_CHECK_EQUAL(dValue, i);

        data.getValue(SHUNT_N2, &iValue);
        std::cout << "SHUNT_N2              " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);

        data.getValue(SHUNT_B2, &dValue);
        std::cout << "SHUNT_B2              " << dValue << std::endl;
        BOOST_CHECK_EQUAL(dValue, i);

        data.getValue(SHUNT_N3, &iValue);
        std::cout << "SHUNT_N3              " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);

        data.getValue(SHUNT_B3, &dValue);
        std::cout << "SHUNT_B3              " << dValue << std::endl;
        BOOST_CHECK_EQUAL(dValue, i);

        data.getValue(SHUNT_N4, &iValue);
        std::cout << "SHUNT_N4              " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);

        data.getValue(SHUNT_B4, &dValue);
        std::cout << "SHUNT_B4              " << dValue << std::endl;
        BOOST_CHECK_EQUAL(dValue, i);

        data.getValue(SHUNT_N5, &iValue);
        std::cout << "SHUNT_N5              " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);

        data.getValue(SHUNT_B5, &dValue);
        std::cout << "SHUNT_B5              " << dValue << std::endl;
        BOOST_CHECK_EQUAL(dValue, i);

        data.getValue(SHUNT_N6, &iValue);
        std::cout << "SHUNT_N6              " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);

        data.getValue(SHUNT_B6, &dValue);
        std::cout << "SHUNT_B6              " << dValue << std::endl;
        BOOST_CHECK_EQUAL(dValue, i);

        data.getValue(SHUNT_N7, &iValue);
        std::cout << "SHUNT_N7              " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);

        data.getValue(SHUNT_B7, &dValue);
        std::cout << "SHUNT_B7              " << dValue << std::endl;
        BOOST_CHECK_EQUAL(dValue, i);

        data.getValue(SHUNT_N8, &iValue);
        std::cout << "SHUNT_N8              " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);

        data.getValue(SHUNT_B8, &dValue);
        std::cout << "SHUNT_B8              " << dValue << std::endl;
        BOOST_CHECK_EQUAL(dValue, i);
    }

}

void validate_imped(std::vector<gridpack::component::DataCollection> & data)
{

    for (std::vector<gridpack::component::DataCollection>::iterator data = collection.begin(), int i =0 ;
            data != collection.end(); ++data, ++i) {

        data.getValue(IMPED_I, &iValue);
        std::cout << "IMPED_I               " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);
    }

    data.setValue(, atoi(split_line[0].c_str()));
}

void validate_terminal(std::vector<gridpack::component::DataCollection> & data)
{

    for (std::vector<gridpack::component::DataCollection>::iterator data = collection.begin(), int i =0 ;
            data != collection.end(); ++data, ++i) {

        data.getValue(M_TERM_I, &iValue);
        std::cout << "M_TERM_I              " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);
    }
}

void validate_section(std::vector<gridpack::component::DataCollection> & data)
{
    for (std::vector<gridpack::component::DataCollection>::iterator data = collection.begin(), int i =0 ;
            data != collection.end(); ++data, ++i) {

        data.getValue(M_SEC_I, &iValue);
        std::cout << "M_SEC_I              " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);
    }
}

void validate_zone(std::vector<gridpack::component::DataCollection> & data)
{

    for (std::vector<gridpack::component::DataCollection>::iterator data = collection.begin(), int i =0 ;
            data != collection.end(); ++data, ++i) {

        data.getValue(ZONE_I, &iValue);
        std::cout << "ZONE_I                " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);

        data.getValue(ZONE_NAME, &sValue);
        std::cout << "ZONE_NAME             " << sValue << std::endl;
        BOOST_CHECK_EQUAL(sValue, i);
    }

}

void validate_interarea(std::vector<gridpack::component::DataCollection> & data)
{
    for (std::vector<gridpack::component::DataCollection>::iterator data = collection.begin(), int i =0 ;
        data != collection.end(); ++data, ++i) {

        data.getValue(I_AREA_I, &iValue);
        std::cout << "I_AREA_I              " << iValue << std::endl;
        BOOST_CHECK_EQUAL(iValue, i);

   }
}

void validate_owner(std::vector<gridpack::component::DataCollection> & data)
{
}

void validate_device(std::vector<gridpack::component::DataCollection> & data)
{
}


BOOST_AUTO_TEST_CASE(openFailure)
{
    bool                    opened         = true;
    try { 
	std::string         fileName        = "";
        gridpack::parser::Parser<gridpack::parser::PTI23_parser> parser;
	parser.getCaseData(fileName);
    } catch (gridpack::Exception & e) {
        opened     = false;
    }

    BOOST_CHECK_EQUAL(opened, false);
}

BOOST_AUTO_TEST_CASE(openSuccess)
{
    bool                    opened        = true;
    try {
        std::string          fileName      = "../PTI23_seqtest.raw";
        gridpack::parser::Parser<gridpack::parser::PTI23_parser> parser;
        parser.getCaseData(fileName);

    } catch (gridpack::Exception & e) {
        opened     = false;
    }

    BOOST_CHECK_EQUAL(opened, true);
}

BOOST_AUTO_TEST_CASE(readValidFile)
{
    bool                    opened        = false;

    try {
        // loop through each data collection for valid data
        std::string          fileName      = "../PTI23_seqtest.raw";
        gridpack::parser::Parser<gridpack::parser::PTI23_parser> parser;
        data_set      * data = parser.getCaseData(fileName);

        std::vector<gridpack::component::DataCollection>   collection   = (*data).begin();
        validate_case(collection);

        // iterate across data
        collection    = ++(*data);
        validate_buses(collection);

        collection    = ++(*data);
        validate_generator(collection);
        
        collection    = ++(*data);
        validate_branch(collection);
        
        collection    = ++(*data);
        validate_tranformer(collection);
        
        collection    = ++(*data);
        validate_area(collection);
        
        collection    = ++(*data);
        validate_dc_line(collection);
        
        collection    = ++(*data);
        validate_shunt(collection);
        
        collection    = ++(*data);
        validate_imped(collection);
        
        collection    = ++(*data);
        validate_terminal(collection);
        
        collection    = ++(*data);
        validate_section(collection);
        
        collection    = ++(*data);
        validate_zone(collection);
        
        collection    = ++(*data);
        validate_interarea(collection);
        
        collection    = ++(*data);
        validate_owner(collection);
        
        collection    = ++(*data);
        validate_device(collection);
 
    } catch (gridpack::Exception & e) {
        opened     = false;
    }

    BOOST_CHECK_EQUAL(true, true);

}


BOOST_AUTO_TEST_SUITE_END()

// -------------------------------------------------------------
// init_function
// -------------------------------------------------------------
bool init_function()
{
  return true;
}

// -------------------------------------------------------------
//  Main Program
// -------------------------------------------------------------
int
main(int argc, char **argv)
{
  int result = ::boost::unit_test::unit_test_main( &init_function, argc, argv );
}

